{
  "projectName": "Weather Personalized App",
  "projectType": "android",
  "projectStage": "development",
  "mainLanguages": ["Kotlin", "Java"],
  "mainFrameworks": ["Jetpack Compose", "Android SDK", "Firebase"],
  "keyTechnologies": ["TensorFlow Lite", "Room Database", "Retrofit", "FCM"],
  "keyFeatures": ["AI Personalization", "Weather API", "Point System", "Smart Notifications", "Reward System"],
  "projectLifecycle": {
    "stage1_brainstorm": {
      "description": "Giai ƒëo·∫°n brainstorm v√† l√™n √Ω t∆∞·ªüng",
      "workflowRules": [
        ".trae/rules/brainstorm-workflow.md",
        ".trae/rules/brainstorm-overview.md"
      ],
      "requiredOutputs": [
        "Brainstorm_[ProjectName].md",
        "Updated .project-identity with basic info"
      ],
      "nextStage": "stage2_setup"
    },
    "stage2_setup": {
      "description": "Giai ƒëo·∫°n setup d·ª± √°n v√† c·∫•u tr√∫c",
      "workflowRules": [
        ".trae/rules/planning-workflow.md",
        ".trae/rules/project-stage-manager.md"
      ],
      "requiredOutputs": [
        "Project structure created",
        "Technical stack selected",
        "Development environment ready"
      ],
      "nextStage": "stage3_development"
    },
    "stage3_development": {
      "description": "Giai ƒëo·∫°n ph√°t tri·ªÉn ch√≠nh",
      "workflowRules": "Based on projectType",
      "platformSpecificRules": {
        "base": [
          ".trae/rules/design-to-prompt.md"
        ],
        "android": [
          ".trae/rules/android-workflow.md",
          "docs/TSDDR-2.0-Guide.md"
        ],
        "ios": [
          ".trae/rules/ios-workflow.md",
          "docs/TSDDR-2.0-Guide.md"
        ],
        "flutter": [
          ".trae/rules/tdd-mobile-workflow.md",
          "docs/TSDDR-2.0-Guide.md"
        ],
        "web": [
          ".trae/rules/frontend-rules.md",
          ".trae/rules/development-rules.md"
        ]
      }
    }
  },
  "coreRules": {
    "description": [
      "Load c√°c quy t·∫Øc t·ª´ .trae/rules/ d·ª±a tr√™n project type",
      "Ki·ªÉm tra memories c√≥ li√™n quan",
      "√Åp d·ª•ng workflow rules ph√π h·ª£p v·ªõi stage hi·ªán t·∫°i"
    ],
    "always_applied": [
      ".trae/rules/base-rules.md",
      ".trae/rules/context7-auto-workflow.md",
      ".trae/rules/development-rules.md",
      ".trae/rules/markdown-unified-rules.md",
      ".trae/rules/trae-ai-integration.md"
    ],
    "project_management": [
      ".trae/rules/planning-workflow.md",
      ".trae/rules/project-stage-manager.md",
      ".trae/rules/resource-management.md"
    ],
    "quality_assurance": [
      "docs/TSDDR-2.0-Guide.md"
    ]
  },
  "integrations": {
    "ai_apis": {
      "rule": ".trae/rules/api-integration-rules.md"
    },
    "mcp_tools": {
      "browser_debug": true
    }
  },
  "projectStructure": {
    "docs/project/": "Project documentation files (.md) - B·∫ÆT BU·ªòC ƒë·∫∑t t·∫•t c·∫£ file .md ·ªü ƒë√¢y",
    "docs/templates/": "Template files for project setup",
    "instructions/": "Project workflows and API documentation",
    "scripts/": "Automation scripts",
    "assets/": "Static resources",
    "design/": "Design files for analysis",
    ".trae/rules/": "Trae AI specific rules v√† workflows",
    "_backups/": "File backups (git-ignored)"
  },
  "projectIdentifiers": [
    ".project-identity",
    ".project-personality"
  ],
  "workflowEnforcement": {
    "agentSelectionPriority": {
      "description": "Integration with .trae/agents/agent-selector-system.md - bypassed if agent already selected",
      "systemIntegration": {
        "primarySource": ".trae/agents/agent-selector-system.md",
        "bypassCondition": "agent_already_selected_by_selector",
        "mandatoryValidation": {
          "testSpecDrivenWorkflow": {
            "required": true,
            "location": ".kiro/specs/",
            "files": ["requirements.md", "design.md", "tasks.md"],
            "stopOnMissing": true,
            "priority": "CRITICAL"
          },
          "workflowStructure": {
            "testPhase": "AI-powered error pattern detection",
            "reviewPhase": "Multi-AI code review system",
            "qualityGates": "Configuration validation"
          }
        }
      },
      "selectionAlgorithm": {
        "contextAnalysisEngine": {
          "fileTypeDetection": {
            "ios": [".swift", ".xcodeproj"],
            "android": [".kt", ".java", "build.gradle"],
            "apkMod": [".smali", ".apk", "AndroidManifest.xml"],
            "frontend": [".js", ".ts", ".jsx", ".tsx", "package.json"],
            "backend": [".php", "composer.json", "Laravel files"],
            "crossPlatform": [".dart", "pubspec.yaml"],
            "devops": ["Dockerfile", ".yml", ".yaml"]
          },
          "keywordAnalysis": {
            "ios": ["swift", "swiftui", "xcode", "ios", "cocoapods"],
            "android": ["kotlin", "android", "jetpack", "gradle", "room"],
            "apkMod": ["apk", "smali", "decompile", "firebase", "safeads"],
            "frontend": ["react", "vue", "angular", "nextjs", "typescript"],
            "backend": ["api", "server", "database", "laravel", "express"],
            "crossPlatform": ["flutter", "react-native", "dart", "expo"],
            "devops": ["docker", "kubernetes", "ci/cd", "deployment"]
          }
        },
        "scoringFactors": {
          "keywordMatch": 0.35,
          "fileType": 0.25,
          "complexity": 0.20,
          "performance": 0.15,
          "userPreference": 0.05
        },
        "confidenceThresholds": {
          "high": 0.75,
          "medium": 0.55,
          "low": 0.35,
          "clarificationNeeded": "< 0.35"
        }
      },
      "fallbackMechanisms": {
        "multiAgentTasks": "route_to_primary_with_collaboration",
        "unclearContext": "request_additional_information",
        "lowConfidence": "present_top_2_3_options",
        "newTechnologies": "default_to_most_relevant_with_notes"
      }
    },
    "mandatoryProjectIdentityCheck": {
      "description": "B·∫ÆT BU·ªòC ki·ªÉm tra .project-identity tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu b·∫•t k·ª≥ nhi·ªám v·ª• n√†o",
      "triggers": [
        "M·ªçi y√™u c·∫ßu t·ª´ ng∆∞·ªùi d√πng",
        "B·∫Øt ƒë·∫ßu session m·ªõi",
        "Th·ª±c hi·ªán b·∫•t k·ª≥ c√¥ng vi·ªác n√†o"
      ],
      "checkList": [
        "ƒê·ªçc v√† hi·ªÉu projectType, projectStage, mainLanguages, mainFrameworks",
        "X√°c ƒë·ªãnh workflow rules ph√π h·ª£p v·ªõi stage hi·ªán t·∫°i",
        "√Åp d·ª•ng platformSpecificRules n·∫øu c√≥",
        "Ki·ªÉm tra integrations v√† features ƒë∆∞·ª£c b·∫≠t",
        "Tu√¢n th·ªß coreRules.always_applied",
        "Th·ª±c hi·ªán agent selection theo priority rules"
      ],
      "mandatoryActions": [
        "Load appropriate workflow rules t·ª´ .trae/rules/",
        "Ki·ªÉm tra Context7 memories li√™n quan ƒë·∫øn project",
        "√Åp d·ª•ng project-specific constraints v√† requirements",
        "C·∫≠p nh·∫≠t projectStage n·∫øu c·∫ßn thi·∫øt",
        "Execute agent selection process v·ªõi priority scoring"
      ]
    },
    "newProjectDetection": {
      "triggers": [
        "Empty project folder",
        "No Brainstorm_*.md files exist",
        "User mentions '√Ω t∆∞·ªüng m·ªõi' or 'd·ª± √°n m·ªõi'"
      ],
      "mandatoryFirstStep": "stage1_brainstorm",
      "blockingMessage": "üö´ D·ª∞ √ÅN M·ªöI PH√ÅT HI·ªÜN - B·∫ÆT BU·ªòC BRAINSTORM TR∆Ø·ªöC\n‚úÖ H√£y b·∫Øt ƒë·∫ßu: 'T√¥i mu·ªën brainstorm √Ω t∆∞·ªüng...'"
    },
    "stageProgression": {
      "cannot_skip_stages": true,
      "require_completion_confirmation": true,
      "auto_update_project_stage": true
    }
  },

  "features": {
    "ai_context_analysis": true,
    "voice_commands": true,
    "resource_management": true,
    "design_analysis": true,
    "auto_project_detection": true,
    "mcp_integration": true,
    "telegram_notifications": true,
    "intelligent_agent_selection": true,
    "multi_factor_scoring": true,
    "performance_tracking": true
  },
  "currentWorkingStatus": {
    "aiTool": "Claude 4 Sonnet",
    "workIntent": "Ho√†n thi·ªán h∆∞·ªõng d·∫´n OpenWeatherMap API v·ªõi ƒë·ªô ch√≠nh x√°c t·ªëi ƒëa cho Weather Personalized App",
  "targetFiles": ["WeatherAPI.md", "Changelog.md", "Help.md"],
  "status": "completed",
  "lastUpdate": "2024-12-19T11:30:00Z",
  "completedTasks": ["WeatherAPI.md Creation", "API Integration Guide", "Weather Compatibility Algorithm", "Documentation Updates", "‚úÖ ENHANCED: B·ªï sung h∆∞·ªõng d·∫´n l·∫•y th√¥ng tin th·ªùi ti·∫øt ƒë·∫ßy ƒë·ªß & ch√≠nh x√°c nh·∫•t", "‚úÖ Multi-Source Data Validation v·ªõi ki·ªÉm tra gi√° tr·ªã h·ª£p l√Ω", "‚úÖ Enhanced Location Accuracy v·ªõi GPS ƒë·ªô ch√≠nh x√°c cao", "‚úÖ Data Aggregation v·ªõi weighted average v√† quality control", "‚úÖ Real-time Monitoring v·ªõi notification system", "‚úÖ Advanced Caching Strategy v·ªõi metadata v√† fallback", "‚úÖ API Usage Optimization v·ªõi rate limiting th√¥ng minh", "‚úÖ Best Practices ƒë·ªÉ ƒë·∫°t ƒë·ªô ch√≠nh x√°c 95%+ v√† response time < 2s"],
  "nextSteps": ["Tri·ªÉn khai Android implementation theo h∆∞·ªõng d·∫´n enhanced", "Implement Multi-Source Data Validation system", "T·∫°o Enhanced Location Accuracy v·ªõi GPS optimization", "Implement Advanced Caching v·ªõi metadata", "T·∫°o Real-time Data Quality Monitoring", "Integrate enhanced features v√†o MainActivity v√† UI components"]
  }
}
